import{_ as s,o as n,c as a,b as l}from"./app.cd02527d.js";const C=JSON.parse('{"title":"usePreview","description":"","frontmatter":{"map":{"path":"/usePreview","source":{"show":false}},"realPath":"src/usePreview/index.zh-CN.md"},"headers":[{"level":2,"title":"\u6E90\u7801\u5C55\u793A","slug":"\u6E90\u7801\u5C55\u793A"},{"level":2,"title":"API","slug":"api"},{"level":2,"title":"Params","slug":"params"},{"level":2,"title":"Result","slug":"result"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"usePreview/index.md"}'),p={name:"usePreview/index.md"},o=l(`<h1 id="usepreview" tabindex="-1">usePreview <a class="header-anchor" href="#usepreview" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">\u6CE8\u610F</p><p>\u7531\u4E8E\u4F7F\u7528\u9891\u7387\u4F4E\u548C\u4F9D\u8D56\u7684\u5B89\u5168\u6027\uFF0C<code>v1.7.2 \u5DF2\u5F03\u7528</code>\u3002\u4EE5\u4E0B\u7ED9\u4E88\u5C01\u88C5\u601D\u8DEF\u3002</p></div><p>\u7528\u4E8E\u9884\u89C8 md \u548C vue \u7EC4\u4EF6\u89C6\u56FE\u7684 hook</p><h2 id="\u6E90\u7801\u5C55\u793A" tabindex="-1">\u6E90\u7801\u5C55\u793A <a class="header-anchor" href="#\u6E90\u7801\u5C55\u793A" aria-hidden="true">#</a></h2><div class="language-typescript"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">marked</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;marked&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">unref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watchEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">VueElement</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">usePreview</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">md</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">createApp</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">VueElement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Element</span><span style="color:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mdCompute</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">computed</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">unref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">md</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">watchEffect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">onInvalidate</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">mdCompute</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">mdCompute</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">html</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">marked</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mdCompute</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">html</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mdCompute</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">onInvalidate</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { marked } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;marked&#39;</span></span>
<span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { Ref, computed, unref, ref, watchEffect, createApp, VueElement } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">export</span><span style="color:#953800;"> </span><span style="color:#CF222E;">default</span><span style="color:#953800;"> </span><span style="color:#CF222E;">function</span><span style="color:#953800;"> </span><span style="color:#8250DF;">usePreview</span><span style="color:#953800;">(</span></span>
<span class="line"><span style="color:#953800;">  md</span><span style="color:#CF222E;">:</span><span style="color:#953800;"> Parameters&lt;</span><span style="color:#CF222E;">typeof</span><span style="color:#953800;"> </span><span style="color:#24292F;">createApp</span><span style="color:#953800;">&gt; </span><span style="color:#CF222E;">|</span><span style="color:#953800;"> Ref&lt;</span><span style="color:#0550AE;">string</span><span style="color:#953800;">&gt; </span><span style="color:#CF222E;">|</span><span style="color:#953800;"> </span><span style="color:#0550AE;">string</span><span style="color:#953800;"> </span><span style="color:#CF222E;">|</span><span style="color:#953800;"> VueElement,</span></span>
<span class="line"><span style="color:#953800;">) </span><span style="color:#24292F;">{</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">container</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">ref</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">Element</span><span style="color:#24292F;">&gt;()</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">mdCompute</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">computed</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">unref</span><span style="color:#24292F;">(md))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">watchEffect</span><span style="color:#24292F;">(</span><span style="color:#953800;">onInvalidate</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (mdCompute.value </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#24292F;"> container.value) {</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">try</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">typeof</span><span style="color:#24292F;"> mdCompute.value </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;string&#39;</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">          </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">html</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> marked.</span><span style="color:#8250DF;">parse</span><span style="color:#24292F;">(mdCompute.value)</span></span>
<span class="line"><span style="color:#24292F;">          </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (html) container.value.innerHTML </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> html</span></span>
<span class="line"><span style="color:#24292F;">        } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">          </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">app</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">createApp</span><span style="color:#24292F;">(mdCompute.value)</span></span>
<span class="line"><span style="color:#24292F;">          app.</span><span style="color:#8250DF;">mount</span><span style="color:#24292F;">(container.value)</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">      } </span><span style="color:#CF222E;">catch</span><span style="color:#24292F;"> (error) {</span></span>
<span class="line"><span style="color:#24292F;">        console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(error)</span></span>
<span class="line"><span style="color:#24292F;">      }</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">onInvalidate</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (container.value) container.value.innerHTML </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292F;">    })</span></span>
<span class="line"><span style="color:#24292F;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    container,</span></span>
<span class="line"><span style="color:#24292F;">  }</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h2><div class="language-typescript"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">usePreview</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">container</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">usePreview</span><span style="color:#24292F;">(target)</span></span>
<span class="line"></span></code></pre></div><h2 id="params" tabindex="-1">Params <a class="header-anchor" href="#params" aria-hidden="true">#</a></h2><table><thead><tr><th>\u53C2\u6570</th><th>\u8BF4\u660E</th><th>\u7C7B\u578B</th></tr></thead><tbody><tr><td>target</td><td>DOM \u8282\u70B9\u6216\u8005 Ref</td><td><code>VueComponent</code> | <code>string</code> | <code>JSX.Element</code></td></tr></tbody></table><h2 id="result" tabindex="-1">Result <a class="header-anchor" href="#result" aria-hidden="true">#</a></h2><table><thead><tr><th>\u53C2\u6570</th><th>\u8BF4\u660E</th><th>\u7C7B\u578B</th></tr></thead><tbody><tr><td>container</td><td>DOM \u8282\u70B9\u6216\u8005 Ref</td><td><code>Element</code> | <code>() =&gt; Element</code> | <code>JSX.Element</code></td></tr></tbody></table><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-hidden="true">#</a></h2><p><a href="https://github.com/InhiblabCore/vue-hooks-plus/tree/master/packages/hooks/src/usePreview/index.ts" target="_blank" rel="noopener noreferrer">\u6E90\u7801</a> \u2022 <a href="https://github.com/InhiblabCore/vue-hooks-plus/tree/master/packages/hooks/src/usePreview/index.zh-CN.md" target="_blank" rel="noopener noreferrer">\u6587\u6863</a> \u2022 <a href="https://github.com/InhiblabCore/vue-hooks-plus/tree/master/packages/hooks/src/usePreview/demo" target="_blank" rel="noopener noreferrer">\u793A\u4F8B</a></p>`,13),e=[o];function t(r,c,B,y,F,i){return n(),a("div",null,e)}var d=s(p,[["render",t]]);export{C as __pageData,d as default};
