import{_ as s,o as n,c as a,a as p}from"./app.4d6255f4.js";const u=JSON.parse('{"title":"\u{1F4D0} useRequest specification","description":"","frontmatter":{"map":{"path":"/useRequest/guide/"},"realPath":"src/useRequest/docs/guide/index.en-US.md"},"headers":[{"level":2,"title":"Foreword","slug":"foreword"},{"level":2,"title":"useRequest Process review","slug":"userequest-process-review"},{"level":2,"title":"Description of development process (support typescript)","slug":"description-of-development-process-support-typescript"},{"level":2,"title":"Example business scenarios","slug":"example-business-scenarios"},{"level":3,"title":"Directory structure","slug":"directory-structure"},{"level":2,"title":"\u4E00\u3001Process axios","slug":"\u4E00\u3001process-axios"},{"level":2,"title":"\u4E8C\u3001Process the business request function","slug":"\u4E8C\u3001process-the-business-request-function"},{"level":2,"title":"\u4E09\u3001Use the useRequest in the. vue","slug":"\u4E09\u3001use-the-userequest-in-the-vue"},{"level":2,"title":"END","slug":"end"}],"relativePath":"en/useRequest/guide/index.md"}'),l={name:"en/useRequest/guide/index.md"},o=p(`<h1 id="\u{1F4D0}-userequest-specification" tabindex="-1">\u{1F4D0} useRequest specification <a class="header-anchor" href="#\u{1F4D0}-userequest-specification" aria-hidden="true">#</a></h1><h2 id="foreword" tabindex="-1">Foreword <a class="header-anchor" href="#foreword" aria-hidden="true">#</a></h2><p>I believe that <code>useRequest</code> is as a business development is more frequently used Hook, please first understand the following <code>useRequest</code> functions, limited to document display, can not give you a complete business request process to show, here will be a set of examples to show a complete business development specifications, for reference.</p><h2 id="userequest-process-review" tabindex="-1">useRequest Process review <a class="header-anchor" href="#userequest-process-review" aria-hidden="true">#</a></h2><p><code>useRequest</code> is used as a request intermediate layer and receives arbitrary <code>Promise</code> objects. If ts is developed, it needs to explicitly return <code>Promise &lt;TData&gt;</code> when encapsulating axios for type acquisition, and the intermediate layer is executing the request and executing various plug-ins intermediate.</p><h2 id="description-of-development-process-support-typescript" tabindex="-1">Description of development process (support typescript) <a class="header-anchor" href="#description-of-development-process-support-typescript" aria-hidden="true">#</a></h2><ul><li>The package <code>axios</code> function <code>request</code> in vue returns <code>Promise &lt;TData&gt;</code></li><li>The encapsulation business request function calls the <code>request</code></li><li>With the <code>useRequest</code> for business development</li></ul><blockquote><p><em>tip: Not limited to <code>axios</code>, but also the request instances of <code>requestjs</code>, <code>fetch</code>, etc., that return <code>Promise</code> objects.</em></p></blockquote><h2 id="example-business-scenarios" tabindex="-1">Example business scenarios <a class="header-anchor" href="#example-business-scenarios" aria-hidden="true">#</a></h2><p>Business scenario: Assuming that there is a home page business module, you need to obtain the basic information of a user on the home page</p><h3 id="directory-structure" tabindex="-1">Directory structure <a class="header-anchor" href="#directory-structure" aria-hidden="true">#</a></h3><div class="language-bash"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#56B6C2;">.</span></span>
<span class="line"><span style="color:#ABB2BF;">\u251C\u2500\u2500 src</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u251C\u2500\u2500 network</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502    \u251C\u2500\u2500 axios.ts</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u251C\u2500\u2500 views</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502    \u251C\u2500\u2500 home</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502    \u2502    \u251C\u2500\u2500 Home.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502    \u2502    \u251C\u2500\u2500 Home.less</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502    \u2502    \u251C\u2500\u2500 services.ts  // API</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502    \u2502    \u2514\u2500\u2500 data.d.ts    // TS </span><span style="color:#56B6C2;">type</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u251C\u2500\u2500 services   // recommend</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2502   \u2502   \u2514\u2500\u2500 api.ts // global API</span></span>
<span class="line"><span style="color:#ABB2BF;">\u2514\u2500\u2500 typings.d.ts   // global ts </span><span style="color:#56B6C2;">type</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#0550AE;">.</span></span>
<span class="line"><span style="color:#24292F;">\u251C\u2500\u2500 src</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u251C\u2500\u2500 network</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502    \u251C\u2500\u2500 axios.ts</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u251C\u2500\u2500 views</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502    \u251C\u2500\u2500 home</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502    \u2502    \u251C\u2500\u2500 Home.vue</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502    \u2502    \u251C\u2500\u2500 Home.less</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502    \u2502    \u251C\u2500\u2500 services.ts  // API</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502    \u2502    \u2514\u2500\u2500 data.d.ts    // TS </span><span style="color:#0550AE;">type</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u251C\u2500\u2500 services   // recommend</span></span>
<span class="line"><span style="color:#24292F;">\u2502   \u2502   \u2514\u2500\u2500 api.ts // global API</span></span>
<span class="line"><span style="color:#24292F;">\u2514\u2500\u2500 typings.d.ts   // global ts </span><span style="color:#0550AE;">type</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="\u4E00\u3001process-axios" tabindex="-1">\u4E00\u3001Process axios <a class="header-anchor" href="#\u4E00\u3001process-axios" aria-hidden="true">#</a></h2><p><code>src/network/axios.ts</code></p><div class="language-typescript"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">axios</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">AxiosRequestConfig</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;axios&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">post</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;Content-Type&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;application/x-www-form-urlencoded;charset=UTF-8&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">axiosInstance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">axiosInstance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">config</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">axiosInstance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">message</span><span style="color:#ABB2BF;">?.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">?.(</span><span style="color:#98C379;">&#39;timeout&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;timeout&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">ResponseType</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">&gt;(</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AxiosRequestConfig</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ResponseType</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">axiosInstance</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">      .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">      .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">axiosInstance</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> axios, { AxiosRequestConfig } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;axios&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">axios.defaults.headers.post[</span><span style="color:#0A3069;">&#39;Content-Type&#39;</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;application/x-www-form-urlencoded;charset=UTF-8&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">axiosInstance</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> axios.</span><span style="color:#8250DF;">create</span><span style="color:#24292F;">({</span></span>
<span class="line"><span style="color:#24292F;">  timeout: </span><span style="color:#0550AE;">10000</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">axiosInstance.interceptors.request.</span><span style="color:#8250DF;">use</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">config</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> config</span></span>
<span class="line"><span style="color:#24292F;">  },</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">error</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">reject</span><span style="color:#24292F;">(error)</span></span>
<span class="line"><span style="color:#24292F;">  },</span></span>
<span class="line"><span style="color:#24292F;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">axiosInstance.interceptors.response.</span><span style="color:#8250DF;">use</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">response</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (response?.status </span><span style="color:#CF222E;">===</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">200</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">resolve</span><span style="color:#24292F;">(response.data)</span></span>
<span class="line"><span style="color:#24292F;">    } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">reject</span><span style="color:#24292F;">(response)</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">  },</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">error</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (error?.message?.</span><span style="color:#8250DF;">includes</span><span style="color:#24292F;">?.(</span><span style="color:#0A3069;">&#39;timeout&#39;</span><span style="color:#24292F;">)) {</span></span>
<span class="line"><span style="color:#24292F;">      console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;timeout&#39;</span><span style="color:#24292F;">)</span></span>
<span class="line"><span style="color:#24292F;">    } </span><span style="color:#CF222E;">else</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">      console.</span><span style="color:#8250DF;">log</span><span style="color:#24292F;">(error)</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">.</span><span style="color:#8250DF;">reject</span><span style="color:#24292F;">(error)</span></span>
<span class="line"><span style="color:#24292F;">  },</span></span>
<span class="line"><span style="color:#24292F;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">request</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> &lt;</span><span style="color:#953800;">ResponseType</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">&gt;(</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">url</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">options</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#953800;">AxiosRequestConfig</span><span style="color:#24292F;">&lt;</span><span style="color:#0550AE;">unknown</span><span style="color:#24292F;">&gt;,</span></span>
<span class="line"><span style="color:#24292F;">)</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Promise</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">ResponseType</span><span style="color:#24292F;">&gt; </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">new</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">Promise</span><span style="color:#24292F;">((</span><span style="color:#953800;">resolve</span><span style="color:#24292F;">, </span><span style="color:#953800;">reject</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">axiosInstance</span><span style="color:#24292F;">({</span></span>
<span class="line"><span style="color:#24292F;">      url,</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#CF222E;">...</span><span style="color:#24292F;">options,</span></span>
<span class="line"><span style="color:#24292F;">    })</span></span>
<span class="line"><span style="color:#24292F;">      .</span><span style="color:#8250DF;">then</span><span style="color:#24292F;">(</span><span style="color:#953800;">res</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#8250DF;">resolve</span><span style="color:#24292F;">(res.data)</span></span>
<span class="line"><span style="color:#24292F;">      })</span></span>
<span class="line"><span style="color:#24292F;">      .</span><span style="color:#8250DF;">catch</span><span style="color:#24292F;">(</span><span style="color:#953800;">err</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">reject</span><span style="color:#24292F;">(err))</span></span>
<span class="line"><span style="color:#24292F;">  })</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> { axiosInstance, request }</span></span>
<span class="line"></span></code></pre></div><h2 id="\u4E8C\u3001process-the-business-request-function" tabindex="-1">\u4E8C\u3001Process the business request function <a class="header-anchor" href="#\u4E8C\u3001process-the-business-request-function" aria-hidden="true">#</a></h2><p>Modular export request function, the generic type of <code>request</code> is incoming is the type of request data, which needs to be defined in advance, look at the \u{1F447}.</p><p><code>src/views/home/services.ts</code></p><div class="language-typescript"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@/network/axios&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NameType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./data.d&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getUserInfo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">request</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">NameType</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;url&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { request } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;@/network/axios&#39;</span></span>
<span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { NameType } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;./data.d&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">async</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">function</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getUserInfo</span><span style="color:#24292F;">(</span><span style="color:#953800;">id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">request</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">NameType</span><span style="color:#24292F;">&gt;(</span><span style="color:#0A3069;">&#39;url&#39;</span><span style="color:#24292F;">, {</span></span>
<span class="line"><span style="color:#24292F;">    params: {</span></span>
<span class="line"><span style="color:#24292F;">      id,</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">  })</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>The Module exports the type to prevent the type from polluting the global situation</p><p><code>src/views/home/data.d.ts</code></p><div class="language-typescript"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NameType</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">type</span><span style="color:#24292F;"> </span><span style="color:#953800;">NameType</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">name</span><span style="color:#CF222E;">?:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">string</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">age</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">number</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="\u4E09\u3001use-the-userequest-in-the-vue" tabindex="-1">\u4E09\u3001Use the useRequest in the. vue <a class="header-anchor" href="#\u4E09\u3001use-the-userequest-in-the-vue" aria-hidden="true">#</a></h2><p>. In vue, use <code>useRequest</code> to use <code>getUserInfo</code>, incoming parameters, <code>data</code> is a <code>Ref &lt;NameType&gt;</code> type, you can easily get the type you defined in advance. In the. vue file, you only need to focus on the business, and you do not need to write too many type and function definitions to facilitate the subsequent maintenance.</p><p><code>src/views/home/Home.vue</code></p><div class="language-vue"><span class="copy"></span><pre class="vp-code-dark"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {{ </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> }}</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Home&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRequest</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vue-hooks-plus&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getUserInfo</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./services&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useRequest</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getUserInfo</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;666&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="vp-code-light"><code><span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">template</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">  &lt;</span><span style="color:#116329;">div</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">    {{ data }}</span></span>
<span class="line"><span style="color:#24292F;">  &lt;/</span><span style="color:#116329;">div</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">template</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">script</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">lang</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;ts&quot;</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">export</span><span style="color:#953800;"> </span><span style="color:#CF222E;">default</span><span style="color:#953800;"> {</span></span>
<span class="line"><span style="color:#953800;">    </span><span style="color:#24292F;">name: </span><span style="color:#0A3069;">&#39;Home&#39;</span><span style="color:#953800;">,</span></span>
<span class="line"><span style="color:#953800;">  }</span></span>
<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">script</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">&lt;</span><span style="color:#116329;">script</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">lang</span><span style="color:#24292F;">=</span><span style="color:#0A3069;">&quot;ts&quot;</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">setup</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { useRequest } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;vue-hooks-plus&#39;</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { getUserInfo } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;./services&#39;</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> { </span><span style="color:#0550AE;">data</span><span style="color:#24292F;"> } </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">useRequest</span><span style="color:#24292F;">(() </span><span style="color:#CF222E;">=&gt;</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getUserInfo</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&#39;666&#39;</span><span style="color:#24292F;">))</span></span>
<span class="line"><span style="color:#24292F;">&lt;/</span><span style="color:#116329;">script</span><span style="color:#24292F;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="end" tabindex="-1">END <a class="header-anchor" href="#end" aria-hidden="true">#</a></h2><p>The above is a set of rigorous and reliable request scheme, which can also be used and changed according to their own needs.</p>`,28),e=[o];function t(c,r,y,B,i,F){return n(),a("div",null,e)}var d=s(l,[["render",t]]);export{u as __pageData,d as default};
